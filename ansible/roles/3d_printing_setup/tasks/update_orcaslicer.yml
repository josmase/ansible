---
# Tasks for updating OrcaSlicer to the latest version

- name: Check if OrcaSlicer is installed
  stat:
    path: "{{ orcaslicer_install_bin }}"
  register: orcaslicer_check

- name: Update OrcaSlicer
  block:
    - name: Get current OrcaSlicer version
      command: "{{ orcaslicer_install_bin }} --version"
      register: current_orcaslicer_version
      changed_when: false
      failed_when: false

    - name: Clone/Update OrcaSlicer repository to check version
      git:
        repo: https://github.com/SoftFever/OrcaSlicer.git
        dest: "{{ orcaslicer_check_dir }}"
        version: main
        depth: 1

    - name: Get latest commit hash from repository
      command: git rev-parse HEAD
      args:
        chdir: "{{ orcaslicer_check_dir }}"
      register: latest_commit
      changed_when: false

    - name: Get current installed commit hash
      shell: |
        if [ -f {{ orcaslicer_version_file }} ]; then
          cat {{ orcaslicer_version_file }}
        else
          echo "unknown"
        fi
      register: current_commit
      changed_when: false

    - name: Check if update is needed
      set_fact:
        update_needed: "{{ latest_commit.stdout != current_commit.stdout }}"

    - name: Display update status
      debug:
        msg: "OrcaSlicer is already up to date ({{ current_commit.stdout[:8] }})"
      when: not update_needed

    - name: Build and install OrcaSlicer update
      block:
        - name: Remove temporary check directory
          file:
            path: "{{ orcaslicer_check_dir }}"
            state: absent

        - name: Clone OrcaSlicer repository for build
          git:
            repo: https://github.com/SoftFever/OrcaSlicer.git
            dest: "{{ orcaslicer_build_dir }}"
            version: main
            force: yes

        - name: Pull latest Git LFS files
          command: git lfs pull
          args:
            chdir: "{{ orcaslicer_build_dir }}"

        - name: Build OrcaSlicer dependencies
          command: ./build_linux.sh -d -j {{ orcaslicer_build_jobs }}
          args:
            chdir: "{{ orcaslicer_build_dir }}"

        - name: Build OrcaSlicer from source
          command: ./build_linux.sh -s -j {{ orcaslicer_build_jobs }}
          args:
            chdir: "{{ orcaslicer_build_dir }}"

        - name: Build OrcaSlicer AppImage
          command: ./build_linux.sh -i -j {{ orcaslicer_build_jobs }}
          args:
            chdir: "{{ orcaslicer_build_dir }}"

        - name: Backup current OrcaSlicer binary
          copy:
            src: "{{ orcaslicer_install_bin }}"
            dest: "{{ orcaslicer_install_bin }}.bak"
            mode: "0755"
            owner: root
            group: root
            remote_src: yes
          ignore_errors: true

        - name: Install updated OrcaSlicer binary
          copy:
            src: "{{ orcaslicer_build_dir }}/build/package/bin/orca-slicer"
            dest: "{{ orcaslicer_install_bin }}"
            mode: "0755"
            owner: root
            group: root
            remote_src: yes

        - name: Update OrcaSlicer resources directory
          synchronize:
            src: "{{ orcaslicer_build_dir }}/resources/"
            dest: "{{ orcaslicer_resources_dir }}/"
            delete: yes
            recursive: yes
          delegate_to: "{{ inventory_hostname }}"

        - name: Install updated OrcaSlicer AppImage
          shell: |
            find {{ orcaslicer_build_dir }}/build -maxdepth 1 -name "OrcaSlicer*.AppImage" -not -name "appimagetool.AppImage" -exec cp {} {{ orcaslicer_install_appimage }} \;
            chmod +x {{ orcaslicer_install_appimage }}

        - name: Save installed version commit hash
          copy:
            content: "{{ latest_commit.stdout }}"
            dest: "{{ orcaslicer_version_file }}"
            mode: "0644"
            owner: root
            group: root

        - name: Get actual user UID (not escalated)
          command: id -u {{ ansible_user }}
          register: actual_user_uid_update
          changed_when: false

        - name: Check if running Wayland session
          stat:
            path: "/run/user/{{ actual_user_uid_update.stdout }}/wayland-0"
          register: wayland_socket_update
          changed_when: false

        - name: Check NVIDIA driver version
          command: nvidia-smi --query-gpu=driver_version --format=csv,noheader
          register: nvidia_driver_update
          changed_when: false
          failed_when: false
          when: wayland_socket_update.stat.exists

        - name: Check if using NVIDIA GPU
          shell: lsmod | grep -i nvidia
          register: gpu_vendor_update
          changed_when: false
          failed_when: false
          when: wayland_socket_update.stat.exists

        - name: Set NVIDIA Wayland workaround flag for update
          set_fact:
            needs_nvidia_wayland_fix_update: true
          when:
            - wayland_socket_update.stat.exists
            - gpu_vendor_update.rc == 0
            - nvidia_driver_update.stdout is defined
            - nvidia_driver_update.stdout | regex_replace('^([0-9]+).*', '\\1') | int > 555

        - name: Create OrcaSlicer wrapper script for NVIDIA+Wayland
          copy:
            dest: "{{ orcaslicer_install_dir }}/orca-slicer-wrapper.sh"
            mode: "0755"
            owner: root
            group: root
            content: |
              #!/bin/bash
              # NVIDIA Wayland workaround for driver versions > 555
              export LC_ALL=C
              export __GLX_VENDOR_LIBRARY_NAME=mesa
              export __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json
              export MESA_LOADER_DRIVER_OVERRIDE=zink
              export GALLIUM_DRIVER=zink
              export WEBKIT_DISABLE_DMABUF_RENDERER=1
              exec "{{ orcaslicer_install_bin }}" "$@"
          when: needs_nvidia_wayland_fix_update | default(false)

        - name: Update desktop entry for OrcaSlicer (with NVIDIA Wayland wrapper)
          copy:
            dest: /usr/share/applications/orcaslicer.desktop
            mode: "0644"
            owner: root
            group: root
            content: |
              [Desktop Entry]
              Name=OrcaSlicer
              Comment=3D Printer Slicer
              Exec={{ orcaslicer_install_dir }}/orca-slicer-wrapper.sh %u
              Icon=orcaslicer
              Terminal=false
              Type=Application
              Categories=Graphics;3DGraphics;Engineering;
              MimeType=model/stl;application/vnd.ms-3mfdocument;application/prs.wavefront-obj;application/x-amf;x-scheme-handler/orcaslicer;
          when: needs_nvidia_wayland_fix_update | default(false)

        - name: Update desktop entry for OrcaSlicer (standard)
          copy:
            dest: /usr/share/applications/orcaslicer.desktop
            mode: "0644"
            owner: root
            group: root
            content: |
              [Desktop Entry]
              Name=OrcaSlicer
              Comment=3D Printer Slicer
              Exec=env LC_ALL=C {{ orcaslicer_install_bin }} %u
              Icon=orcaslicer
              Terminal=false
              Type=Application
              Categories=Graphics;3DGraphics;Engineering;
              MimeType=model/stl;application/vnd.ms-3mfdocument;application/prs.wavefront-obj;application/x-amf;x-scheme-handler/orcaslicer;
          when: not (needs_nvidia_wayland_fix_update | default(false))

        - name: Clean up OrcaSlicer build directory
          file:
            path: "{{ orcaslicer_build_dir }}"
            state: absent

        - name: Verify OrcaSlicer update
          command: "{{ orcaslicer_install_bin }} --version"
          register: orcaslicer_updated_version
          changed_when: false
          failed_when: false

        - name: Display OrcaSlicer version after update
          debug:
            msg: "OrcaSlicer updated successfully to commit {{ latest_commit.stdout[:8] }}"
          when: orcaslicer_updated_version.rc == 0
      when: update_needed

    - name: Clean up temporary check directory
      file:
        path: "{{ orcaslicer_check_dir }}"
        state: absent
      when: not update_needed
  when: orcaslicer_check.stat.exists
